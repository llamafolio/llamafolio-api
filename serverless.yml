org: llamafolio
app: llamafolio-api
service: llamafolio-api

package:
  individually: true

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: eu-central-1
  tracing:
    apiGateway: true
    lambda: true
  memorySize: 256
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - xray:PutTraceSegments
            - xray:PutTelemetryRecords
          Resource: '*'
        - Effect: 'Allow'
          Action:
            - 's3:ListBucket'
            - 's3:*Object*'
          Resource: '*'
        - Effect: 'Allow'
          Action:
            - 'lambda:InvokeFunction'
          Resource: '*'
        - Effect: 'Allow'
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchGetItem
          Resource:
            - 'Fn::GetAtt': [DynamoTable, Arn]
  environment:
    PGHOST: ${file(./env.js):PGHOST}
    PGUSER: ${file(./env.js):PGUSER}
    PGDATABASE: ${file(./env.js):PGDATABASE}
    PGPASSWORD: ${file(./env.js):PGPASSWORD}
    PGPORT: ${file(./env.js):PGPORT}
    stage: ${self:custom.stage}
    tableName: ${self:custom.tableName}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    CUSTOM_PROVIDER: ${file(./env.js):CUSTOM_PROVIDER}
    LLAMANODES_API_KEY: ${file(./env.js):LLAMANODES_API_KEY}
    ARBITRUM_RPC: ${file(./env.js):ARBITRUM_RPC}
    OPTIMISM_RPC: ${file(./env.js):OPTIMISM_RPC}

  httpApi:
    metrics: true
    cors:
      allowedOrigins: '*'
      allowedHeaders:
        - Content-Type
        - Authorization
      allowedMethods:
        - OPTIONS
        - GET
      maxAge: 31536000

functions:
  getAdapters:
    handler: src/handlers/getAdapters.handler
    description: Get adapters
    events:
      - httpApi:
          method: get
          path: /adapters

  getBalances:
    handler: src/handlers/getBalances.handler
    description: Get address balances
    events:
      - httpApi:
          method: get
          path: /balances/{address}
    timeout: 10

  getBalancesTokens:
    handler: src/handlers/getBalancesTokens.handler
    description: Get address erc20 balances
    events:
      - httpApi:
          method: get
          path: /balances/{address}/tokens
    timeout: 29

  getCategories:
    handler: src/handlers/getCategories.handler
    description: Get categories
    events:
      - httpApi:
          method: get
          path: /categories

  getContracts:
    handler: src/handlers/getContracts.getContract
    description: Get contracts
    events:
      - httpApi:
          method: get
          path: /contracts/{address}

  getGasPriceChart:
    handler: src/handlers/getGasPriceChart.handler
    description: Get gas price chart
    events:
      - httpApi:
          method: get
          path: /gas_price/{chain}/chart

  getHistory:
    handler: src/handlers/getHistory.handler
    description: Get address history
    events:
      - httpApi:
          method: get
          path: /history/{address}

  getInfoStats:
    handler: src/handlers/getInfoStats.handler
    description: Get stats on supported protocols, chains and tokens
    events:
      - httpApi:
          method: get
          path: /info/stats

  getLabels:
    handler: src/handlers/getLabels.handler
    description: Get labels
    events:
      - httpApi:
          method: get
          path: /labels/{address}

  getProtocols:
    handler: src/handlers/getProtocols.handler
    description: Get protocols
    events:
      - httpApi:
          method: get
          path: /protocols

  getLatestProtocols:
    handler: src/handlers/getLatestProtocols.handler
    description: Get latest protocols
    events:
      - httpApi:
          method: get
          path: /protocols/latest

  getLatestSnapshot:
    handler: src/handlers/getLatestSnapshot.handler
    description: Get latest snapshot
    events:
      - httpApi:
          method: get
          path: /snapshots/{address}/latest

  getSyncStatus:
    handler: src/handlers/getSyncStatus.handler
    description: Get sync status
    events:
      - httpApi:
          method: get
          path: /sync_status

  getTokens:
    handler: src/handlers/getTokens.handler
    description: Get tokens
    events:
      - httpApi:
          method: get
          path: /tokens/{address}

  getTokenHolders:
    handler: src/handlers/getTokenHolders.handler
    description: Get the holders data for a token
    events:
      - httpApi:
          method: get
          path: /holders/{address}

  scheduledRevalidateAdaptersContracts:
    handler: src/handlers/revalidateAdapters.scheduledRevalidateAdaptersContracts
    description: Revalidate expired adapters contracts
    events:
      - schedule: rate(10 minutes)

  scheduledUpdateProtocols:
    handler: src/handlers/updateProtocols.scheduledUpdateProtocols
    description: Scheduled update protocols
    events:
      # every new hour
      - schedule: cron(0 * * * ? *)

  scheduledUpdateYields:
    handler: src/handlers/updateYields.scheduledUpdateYields
    description: Scheduled update yields
    events:
      # every new hour
      - schedule: cron(0 * * * ? *)

  revalidateAdapterContracts:
    handler: src/handlers/revalidateAdapters.revalidateAdapterContracts
    description: Revalidate adapter contracts

  updateYields:
    handler: src/handlers/updateYields.handler
    description: Update yields
    timeout: 300

  updateBalances:
    handler: src/handlers/updateBalances.handler
    description: Update balances
    timeout: 300

custom:
  stage: ${opt:stage, self:provider.stage}
  esbuild:
    packager: pnpm
    bundle: true
    minify: true
    keepNames: true
    concurrency: 4
    external:
      - pg-native
      - pg-format
    watch:
      pattern: ['src/**/*.ts']
      ignore: ['.serverless/**/*', '.build', 'dist', 'node_modules', 'test']
    # for debugging
    #keepOutputDirectory: true
  prune:
    automatic: true
    number: 5 # Number of versions to keep
  tableName: ${self:custom.stage}-llamafolio-table

resources:
  - ${file(resources/dynamodb.yml)}

plugins:
  - serverless-offline
  - serverless-esbuild
  - serverless-prune-plugin
